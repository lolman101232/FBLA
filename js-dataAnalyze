const natural = require('natural');
const { KMeans } = require('ml-kmeans');
const moment = require('moment');

/**
 * Categorizes transactions into general spending categories using KMeans clustering.
 * @param {Array} categories - List of raw category descriptions.
 * @param {number} numClusters - Number of general categories to classify into.
 * @return {Object} Dictionary with general category as key and count of transactions as value.
 */
function categorizeTransactions(categories, numClusters = 5) {
    const tokenizer = new natural.WordTokenizer();
    
    // Tokenize category names and get unique words
    const tokenizedCategories = categories.map(cat => tokenizer.tokenize(cat.toLowerCase()));
    const uniqueWords = [...new Set(tokenizedCategories.flat())];
    
    // Convert tokenized words into binary vectors
    const vectors = tokenizedCategories.map(tokens => 
        uniqueWords.map(word => tokens.includes(word) ? 1 : 0)
    );
    
    // Perform KMeans clustering
    const kmeans = new KMeans(numClusters);
    const clusters = kmeans.cluster(vectors);
    
    // Organize results into a dictionary
    const categoryDict = {};
    clusters.forEach(label => {
        const key = `General Category ${label + 1}`;
        categoryDict[key] = (categoryDict[key] || 0) + 1;
    });
    
    return categoryDict;
}

/**
 * Analyzes transaction data and returns insights.
 * @param {Array} listdata - List of transaction entries.
 * @return {Object} Analysis report with categorized data.
 */
function analyzeTransactions(listdata) {
    let analysis = {
        "Profit vs Loss": { "Profit": 0, "Loss": 0 },
        "Amount Range": { "0-20": 0, "20-40": 0, "40-60": 0, "60-80": 0, "80-100": 0, "100+": 0 },
        "In Person vs Online": { "In person": 0, "Online": 0 },
        "Transaction Categories": {},
        "Transactions Per Week": {}
    };
    
    let categories = [];
    
    listdata.forEach(([date, [amount, lossProfit, category, inpersonOnline]]) => {
        categories.push(category);
        
        // Convert transaction date to the start of the week
        const week = moment(date, "YYYY-MM-DD").startOf('isoWeek').format("YYYY-MM-DD");
        
        // Count transactions per week
        analysis["Transactions Per Week"][week] = (analysis["Transactions Per Week"][week] || 0) + 1;
        
        // Profit vs Loss Analysis
        if (lossProfit > 0) {
            analysis["Profit vs Loss"]["Profit"]++;
        } else {
            analysis["Profit vs Loss"]["Loss"]++;
        }
        
        // Amount Range Analysis
        if (amount >= 0 && amount < 20) {
            analysis["Amount Range"]["0-20"]++;
        } else if (amount >= 20 && amount < 40) {
            analysis["Amount Range"]["20-40"]++;
        } else if (amount >= 40 && amount < 60) {
            analysis["Amount Range"]["40-60"]++;
        } else if (amount >= 60 && amount < 80) {
            analysis["Amount Range"]["60-80"]++;
        } else if (amount >= 80 && amount < 100) {
            analysis["Amount Range"]["80-100"]++;
        } else {
            analysis["Amount Range"]["100+"]++;
        }
        
        // In Person vs Online Analysis
        analysis["In Person vs Online"][inpersonOnline]++;
    });
    
    // Categorizing transactions
    analysis["Transaction Categories"] = categorizeTransactions(categories);
    
    return analysis;
}

// Example usage with sample transaction data
const transactions = [
    ["2025-02-01", [15, 1, "Grocery shopping", "In person"]],
    ["2025-02-02", [30, -1, "Fast food", "In person"]],
    ["2025-02-03", [50, 1, "Movie tickets", "Online"]],
    ["2025-02-10", [1000, -1, "Monthly rent", "Online"]],
    ["2025-02-12", [45, -1, "Car fuel", "In person"]],
    ["2025-02-14", [60, 1, "Gym membership", "Online"]],
    ["2025-02-15", [20, -1, "Online gaming subscription", "Online"]],
    ["2025-02-16", [150, -1, "Doctor's appointment", "In person"]],
    ["2025-02-17", [80, 1, "Clothing purchase", "In person"]],
    ["2025-02-18", [90, -1, "Electricity bill", "Online"]]
];

// Output transaction analysis report
console.log(analyzeTransactions(transactions));
